str.find(sub[, start[, end]])

Return the lowest index in the string where substring sub is found within the slice s[start:end].
Optional arguments start and end are interpreted as in slice notation.
Return -1 if sub is not found.

Example-1:
string = "geeks for geeks geeks geeks geeks"
new_string = string.replace("geeks", "GeeksforGeeks", 2)
print(new_string)  # Output: "GeeksforGeeks for GeeksforGeeks geeks geeks geeks"

Example-2:
txt = "Hello, welcome to my world."
x = txt.find("e", 5, 10)
print(x)  # Output: 8

Example-3:
txt = "Hello, welcome to my world."
print(txt.find("q"))  # Output: -1



str.replace(old, new[, count])

Return a copy of the string with all occurrences of substring old replaced by new.
If the optional argument count is given, only the first count occurrences are replaced.

Example-1:
string = "Hello, World!"
new_string = string.replace("World", "Python")
print(new_string)  # Output: "Hello, Python!"

Example-2:
string = "geeks for geeks geeks geeks geeks"
new_string = string.replace("geeks", "GeeksforGeeks", 2)
print(new_string)  # Output: "GeeksforGeeks for GeeksforGeeks geeks geeks geeks"



str.strip([chars])

Return a copy of the string with the leading and trailing characters removed.
The chars argument is a string specifying the set of characters to be removed.
If omitted or None, the chars argument defaults to removing whitespace.
The chars argument is not a prefix or suffix; rather, all combinations of its values are stripped:

Example-1:z
my_string = " Hello, world! "
stripped_string = my_string.strip()
print(stripped_string)  # Output: "Hello, world!"
